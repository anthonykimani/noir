{
    "transpiled": true,
    "noir_version": "0.36.0+b0cbf84eaf69f77628939184c9b869cfb3e15846-x8664",
    "name": "Counter",
    "functions": [
        {
            "name": "increment",
            "is_unconstrained": false,
            "custom_attributes": [
                "private"
            ],
            "abi": {
                "error_types": {},
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                }
                                            },
                                            {
                                                "name": "contract_address",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::call_context::CallContext"
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                }
                                            },
                                            {
                                                "name": "content_commitment",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "num_txs",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "txs_effects_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "in_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "out_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ],
                                                                            "kind": "struct",
                                                                            "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ],
                                                                            "kind": "struct",
                                                                            "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ],
                                                                            "kind": "struct",
                                                                            "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::state_reference::StateReference"
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "slot_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 64
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::address::eth_address::EthAddress"
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                            }
                                                        },
                                                        {
                                                            "name": "gas_fees",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                                                }
                                            },
                                            {
                                                "name": "total_fees",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::header::Header"
                                    }
                                },
                                {
                                    "name": "tx_context",
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "gas_settings",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "gas_limits",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::gas::Gas"
                                                            }
                                                        },
                                                        {
                                                            "name": "teardown_gas_limits",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::gas::Gas"
                                                            }
                                                        },
                                                        {
                                                            "name": "max_fees_per_gas",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                                                            }
                                                        },
                                                        {
                                                            "name": "inclusion_fee",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                                    }
                                },
                                {
                                    "name": "start_side_effect_counter",
                                    "type": {
                                        "kind": "integer",
                                        "sign": "unsigned",
                                        "width": 32
                                    }
                                }
                            ],
                            "kind": "struct",
                            "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "owner",
                        "type": {
                            "fields": [
                                {
                                    "name": "inner",
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "outgoing_viewer",
                        "type": {
                            "fields": [
                                {
                                    "name": "inner",
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        },
                        "visibility": "private"
                    }
                ],
                "return_type": {
                    "abi_type": {
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::call_context::CallContext"
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "returns_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "min_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "is_fee_payer",
                                "type": {
                                    "kind": "boolean"
                                }
                            },
                            {
                                "name": "max_block_number",
                                "type": {
                                    "fields": [
                                        {
                                            "name": "_opt",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "_is_some",
                                                        "type": {
                                                            "kind": "boolean"
                                                        }
                                                    },
                                                    {
                                                        "name": "_value",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "std::option::Option"
                                            }
                                        }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                                }
                            },
                            {
                                "name": "note_hash_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                                    }
                                }
                            },
                            {
                                "name": "nullifier_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                                    }
                                }
                            },
                            {
                                "name": "key_validation_requests_and_generators",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "request",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "pk_m",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "x",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "y",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "is_infinite",
                                                                        "type": {
                                                                            "kind": "boolean"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                                                            }
                                                        },
                                                        {
                                                            "name": "sk_app",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                                                }
                                            },
                                            {
                                                "name": "sk_app_generator",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                                    }
                                }
                            },
                            {
                                "name": "note_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::note_hash::NoteHash"
                                    }
                                }
                            },
                            {
                                "name": "nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::nullifier::Nullifier"
                                    }
                                }
                            },
                            {
                                "name": "private_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "call_context",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                            }
                                                        },
                                                        {
                                                            "name": "function_selector",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::call_context::CallContext"
                                                }
                                            },
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "returns_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "end_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                                    }
                                }
                            },
                            {
                                "name": "public_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "call_context",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                            }
                                                        },
                                                        {
                                                            "name": "function_selector",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::call_context::CallContext"
                                                }
                                            },
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                                    }
                                }
                            },
                            {
                                "name": "public_teardown_call_request",
                                "type": {
                                    "fields": [
                                        {
                                            "name": "call_context",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "msg_sender",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                        }
                                                    },
                                                    {
                                                        "name": "contract_address",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                        }
                                                    },
                                                    {
                                                        "name": "function_selector",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                                                        }
                                                    },
                                                    {
                                                        "name": "is_static_call",
                                                        "type": {
                                                            "kind": "boolean"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::abis::call_context::CallContext"
                                            }
                                        },
                                        {
                                            "name": "args_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                                }
                            },
                            {
                                "name": "l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "recipient",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::address::eth_address::EthAddress"
                                                }
                                            },
                                            {
                                                "name": "content",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                                    }
                                }
                            },
                            {
                                "name": "start_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "note_encrypted_logs_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "length",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::log_hash::NoteLogHash"
                                    }
                                }
                            },
                            {
                                "name": "encrypted_logs_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "length",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "randomness",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "length",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::log_hash::LogHash"
                                    }
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                            }
                                        },
                                        {
                                            "name": "content_commitment",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "num_txs",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "txs_effects_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "in_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "out_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "struct",
                                                                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "struct",
                                                                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "struct",
                                                                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::state_reference::StateReference"
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "slot_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 64
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::address::eth_address::EthAddress"
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                        }
                                                    },
                                                    {
                                                        "name": "gas_fees",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                                            }
                                        },
                                        {
                                            "name": "total_fees",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::header::Header"
                                }
                            },
                            {
                                "name": "tx_context",
                                "type": {
                                    "fields": [
                                        {
                                            "name": "chain_id",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "version",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "gas_settings",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "gas_limits",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::abis::gas::Gas"
                                                        }
                                                    },
                                                    {
                                                        "name": "teardown_gas_limits",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::abis::gas::Gas"
                                                        }
                                                    },
                                                    {
                                                        "name": "max_fees_per_gas",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                                                        }
                                                    },
                                                    {
                                                        "name": "inclusion_fee",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                                            }
                                        }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                                }
                            }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
                    },
                    "visibility": "databus"
                }
            },
            "bytecode": "",
            "debug_symbols": "",
            "brillig_names": [
                "debug_log_oracle_wrapper",
                "get_public_keys_and_partial_address",
                "decompose_hint",
                "lte_hint",
                "random",
                "notify_created_note_oracle_wrapper",
                "get_key_validation_request",
                "field_less_than",
                "build_msg_block",
                "attach_len_to_msg_block",
                "build_msg_block",
                "emit_encrypted_note_log_oracle_wrapper",
                "directive_invert",
                "directive_integer_quotient"
            ]
        },
        {
            "name": "compute_note_hash_and_optionally_a_nullifier",
            "is_unconstrained": true,
            "custom_attributes": [],
            "abi": {
                "error_types": {
                    "3469988399892582431": {
                        "error_kind": "fmtstring",
                        "item_types": [],
                        "length": 20
                    }
                },
                "parameters": [
                    {
                        "name": "contract_address",
                        "type": {
                            "fields": [
                                {
                                    "name": "inner",
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "nonce",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "storage_slot",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "note_type_id",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "compute_nullifier",
                        "type": {
                            "kind": "boolean"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "serialized_note",
                        "type": {
                            "kind": "array",
                            "length": 3,
                            "type": {
                                "kind": "field"
                            }
                        },
                        "visibility": "private"
                    }
                ],
                "return_type": {
                    "abi_type": {
                        "kind": "array",
                        "length": 4,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "public"
                }
            },
            "bytecode": "",
            "debug_symbols": "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",
            "brillig_names": [
                "compute_note_hash_and_optionally_a_nullifier"
            ]
        },
        {
            "name": "initialize",
            "is_unconstrained": false,
            "custom_attributes": [
                "initializer",
                "private"
            ],
            "abi": {
                "error_types": {},
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                }
                                            },
                                            {
                                                "name": "contract_address",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::call_context::CallContext"
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                }
                                            },
                                            {
                                                "name": "content_commitment",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "num_txs",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "txs_effects_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "in_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "out_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ],
                                                                            "kind": "struct",
                                                                            "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ],
                                                                            "kind": "struct",
                                                                            "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ],
                                                                            "kind": "struct",
                                                                            "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::state_reference::StateReference"
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "slot_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 64
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::address::eth_address::EthAddress"
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                            }
                                                        },
                                                        {
                                                            "name": "gas_fees",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                                                }
                                            },
                                            {
                                                "name": "total_fees",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::header::Header"
                                    }
                                },
                                {
                                    "name": "tx_context",
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "gas_settings",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "gas_limits",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::gas::Gas"
                                                            }
                                                        },
                                                        {
                                                            "name": "teardown_gas_limits",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::gas::Gas"
                                                            }
                                                        },
                                                        {
                                                            "name": "max_fees_per_gas",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                                                            }
                                                        },
                                                        {
                                                            "name": "inclusion_fee",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                                    }
                                },
                                {
                                    "name": "start_side_effect_counter",
                                    "type": {
                                        "kind": "integer",
                                        "sign": "unsigned",
                                        "width": 32
                                    }
                                }
                            ],
                            "kind": "struct",
                            "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "headstart",
                        "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 64
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "owner",
                        "type": {
                            "fields": [
                                {
                                    "name": "inner",
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "outgoing_viewer",
                        "type": {
                            "fields": [
                                {
                                    "name": "inner",
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        },
                        "visibility": "private"
                    }
                ],
                "return_type": {
                    "abi_type": {
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::call_context::CallContext"
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "returns_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "min_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "is_fee_payer",
                                "type": {
                                    "kind": "boolean"
                                }
                            },
                            {
                                "name": "max_block_number",
                                "type": {
                                    "fields": [
                                        {
                                            "name": "_opt",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "_is_some",
                                                        "type": {
                                                            "kind": "boolean"
                                                        }
                                                    },
                                                    {
                                                        "name": "_value",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "std::option::Option"
                                            }
                                        }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                                }
                            },
                            {
                                "name": "note_hash_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                                    }
                                }
                            },
                            {
                                "name": "nullifier_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                                    }
                                }
                            },
                            {
                                "name": "key_validation_requests_and_generators",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "request",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "pk_m",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "x",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "y",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "is_infinite",
                                                                        "type": {
                                                                            "kind": "boolean"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                                                            }
                                                        },
                                                        {
                                                            "name": "sk_app",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                                                }
                                            },
                                            {
                                                "name": "sk_app_generator",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                                    }
                                }
                            },
                            {
                                "name": "note_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::note_hash::NoteHash"
                                    }
                                }
                            },
                            {
                                "name": "nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::nullifier::Nullifier"
                                    }
                                }
                            },
                            {
                                "name": "private_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "call_context",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                            }
                                                        },
                                                        {
                                                            "name": "function_selector",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::call_context::CallContext"
                                                }
                                            },
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "returns_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "end_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                                    }
                                }
                            },
                            {
                                "name": "public_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "call_context",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                            }
                                                        },
                                                        {
                                                            "name": "function_selector",
                                                            "type": {
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "struct",
                                                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::abis::call_context::CallContext"
                                                }
                                            },
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                                    }
                                }
                            },
                            {
                                "name": "public_teardown_call_request",
                                "type": {
                                    "fields": [
                                        {
                                            "name": "call_context",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "msg_sender",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                        }
                                                    },
                                                    {
                                                        "name": "contract_address",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                        }
                                                    },
                                                    {
                                                        "name": "function_selector",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                                                        }
                                                    },
                                                    {
                                                        "name": "is_static_call",
                                                        "type": {
                                                            "kind": "boolean"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::abis::call_context::CallContext"
                                            }
                                        },
                                        {
                                            "name": "args_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                                }
                            },
                            {
                                "name": "l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "recipient",
                                                "type": {
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "struct",
                                                    "path": "aztec::protocol_types::address::eth_address::EthAddress"
                                                }
                                            },
                                            {
                                                "name": "content",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                                    }
                                }
                            },
                            {
                                "name": "start_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "note_encrypted_logs_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "length",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::log_hash::NoteLogHash"
                                    }
                                }
                            },
                            {
                                "name": "encrypted_logs_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "length",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "randomness",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "length",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ],
                                        "kind": "struct",
                                        "path": "aztec::protocol_types::abis::log_hash::LogHash"
                                    }
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                            }
                                        },
                                        {
                                            "name": "content_commitment",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "num_txs",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "txs_effects_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "in_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "out_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "struct",
                                                                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "struct",
                                                                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "struct",
                                                                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::state_reference::StateReference"
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "slot_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 64
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::address::eth_address::EthAddress"
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                                        }
                                                    },
                                                    {
                                                        "name": "gas_fees",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                                            }
                                        },
                                        {
                                            "name": "total_fees",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::header::Header"
                                }
                            },
                            {
                                "name": "tx_context",
                                "type": {
                                    "fields": [
                                        {
                                            "name": "chain_id",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "version",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "gas_settings",
                                            "type": {
                                                "fields": [
                                                    {
                                                        "name": "gas_limits",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::abis::gas::Gas"
                                                        }
                                                    },
                                                    {
                                                        "name": "teardown_gas_limits",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::abis::gas::Gas"
                                                        }
                                                    },
                                                    {
                                                        "name": "max_fees_per_gas",
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                                                        }
                                                    },
                                                    {
                                                        "name": "inclusion_fee",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ],
                                                "kind": "struct",
                                                "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                                            }
                                        }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                                }
                            }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
                    },
                    "visibility": "databus"
                }
            },
            "bytecode": "",
            "debug_symbols": "",
            "brillig_names": [
                "get_contract_instance_internal",
                "decompose_hint",
                "lte_hint",
                "get_public_keys_and_partial_address",
                "random",
                "notify_created_note_oracle_wrapper",
                "get_key_validation_request",
                "field_less_than",
                "build_msg_block",
                "attach_len_to_msg_block",
                "build_msg_block",
                "emit_encrypted_note_log_oracle_wrapper",
                "directive_integer_quotient",
                "directive_invert"
            ]
        },
        {
            "name": "get_counter",
            "is_unconstrained": true,
            "custom_attributes": [],
            "abi": {
                "error_types": {},
                "parameters": [
                    {
                        "name": "owner",
                        "type": {
                            "fields": [
                                {
                                    "name": "inner",
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        },
                        "visibility": "private"
                    }
                ],
                "return_type": {
                    "abi_type": {
                        "kind": "field"
                    },
                    "visibility": "public"
                }
            },
            "bytecode": "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",
            "debug_symbols": "",
            "brillig_names": [
                "get_counter"
            ]
        }
    ],
    "outputs": {
        "globals": {
            "notes": [
                {
                    "fields": [
                        {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000003de78269"
                        },
                        {
                            "kind": "string",
                            "value": "ValueNote"
                        },
                        {
                            "fields": [
                                {
                                    "name": "value",
                                    "value": {
                                        "fields": [
                                            {
                                                "name": "index",
                                                "value": {
                                                    "kind": "integer",
                                                    "sign": false,
                                                    "value": "0000000000000000000000000000000000000000000000000000000000000000"
                                                }
                                            },
                                            {
                                                "name": "nullable",
                                                "value": {
                                                    "kind": "boolean",
                                                    "value": false
                                                }
                                            }
                                        ],
                                        "kind": "struct"
                                    }
                                },
                                {
                                    "name": "owner",
                                    "value": {
                                        "fields": [
                                            {
                                                "name": "index",
                                                "value": {
                                                    "kind": "integer",
                                                    "sign": false,
                                                    "value": "0000000000000000000000000000000000000000000000000000000000000001"
                                                }
                                            },
                                            {
                                                "name": "nullable",
                                                "value": {
                                                    "kind": "boolean",
                                                    "value": false
                                                }
                                            }
                                        ],
                                        "kind": "struct"
                                    }
                                },
                                {
                                    "name": "randomness",
                                    "value": {
                                        "fields": [
                                            {
                                                "name": "index",
                                                "value": {
                                                    "kind": "integer",
                                                    "sign": false,
                                                    "value": "0000000000000000000000000000000000000000000000000000000000000002"
                                                }
                                            },
                                            {
                                                "name": "nullable",
                                                "value": {
                                                    "kind": "boolean",
                                                    "value": false
                                                }
                                            }
                                        ],
                                        "kind": "struct"
                                    }
                                }
                            ],
                            "kind": "struct"
                        }
                    ],
                    "kind": "tuple"
                }
            ],
            "storage": [
                {
                    "fields": [
                        {
                            "name": "contract_name",
                            "value": {
                                "kind": "string",
                                "value": "Counter"
                            }
                        },
                        {
                            "name": "fields",
                            "value": {
                                "fields": [
                                    {
                                        "name": "counters",
                                        "value": {
                                            "fields": [
                                                {
                                                    "name": "slot",
                                                    "value": {
                                                        "kind": "integer",
                                                        "sign": false,
                                                        "value": "0000000000000000000000000000000000000000000000000000000000000001"
                                                    }
                                                }
                                            ],
                                            "kind": "struct"
                                        }
                                    }
                                ],
                                "kind": "struct"
                            }
                        }
                    ],
                    "kind": "struct"
                }
            ]
        },
        "structs": {
            "functions": [
                {
                    "fields": [
                        {
                            "name": "parameters",
                            "type": {
                                "fields": [
                                    {
                                        "name": "headstart",
                                        "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 64
                                        }
                                    },
                                    {
                                        "name": "owner",
                                        "type": {
                                            "fields": [
                                                {
                                                    "name": "inner",
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            ],
                                            "kind": "struct",
                                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                        }
                                    },
                                    {
                                        "name": "outgoing_viewer",
                                        "type": {
                                            "fields": [
                                                {
                                                    "name": "inner",
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            ],
                                            "kind": "struct",
                                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                        }
                                    }
                                ],
                                "kind": "struct",
                                "path": "Counter::initialize_parameters"
                            }
                        }
                    ],
                    "kind": "struct",
                    "path": "Counter::initialize_abi"
                },
                {
                    "fields": [
                        {
                            "name": "parameters",
                            "type": {
                                "fields": [
                                    {
                                        "name": "owner",
                                        "type": {
                                            "fields": [
                                                {
                                                    "name": "inner",
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            ],
                                            "kind": "struct",
                                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                        }
                                    },
                                    {
                                        "name": "outgoing_viewer",
                                        "type": {
                                            "fields": [
                                                {
                                                    "name": "inner",
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            ],
                                            "kind": "struct",
                                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                                        }
                                    }
                                ],
                                "kind": "struct",
                                "path": "Counter::increment_parameters"
                            }
                        }
                    ],
                    "kind": "struct",
                    "path": "Counter::increment_abi"
                }
            ]
        }
    },
    "file_map": {
        "101": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
            "source": "use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n        compute_unique_note_hash,\n    },\n    utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"
        },
        "106": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr",
            "source": "use crate::utils::point::point_to_bytes;\nuse dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, point::Point, scalar::Scalar, utils::arr_copy_slice,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, hash::sha256};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator =\n        arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158,\n        236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159,\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"
        },
        "108": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
            "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) =\n        unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(hinted_canonical_public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    hinted_canonical_public_keys\n}\n"
        },
        "112": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/hash.nr",
            "source": "use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER,\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"
        },
        "113": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/initializer.nr",
            "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
        },
        "125": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
            "source": "use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    let (member, exists) = get_contract_instance_deployer_internal_avm(address);\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    let (member, exists) = get_contract_instance_class_id_internal_avm(address);\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    let (member, exists) = get_contract_instance_initialization_hash_internal_avm(address);\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
        },
        "130": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
            "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
        },
        "131": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
            "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
        },
        "132": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
            "source": "use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n    utils::arr_copy_slice,\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used for tagging with this secret.\n/// For this to work, PXE must know the ivpsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_app_tagging_secret(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_app_tagging_secret_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getAppTaggingSecret)]\nunconstrained fn get_app_tagging_secret_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Returns the tagging secrets for a given recipient and all the senders in PXE's address book,\n// siloed for the current contract address.\n/// Includes the last known index used for tagging with this secret.\n/// For this to work, PXE must know the ivsk_m of the recipient.\npub unconstrained fn get_app_tagging_secrets_for_senders(\n    recipient: AztecAddress,\n) -> [IndexedTaggingSecret] {\n    let results = get_app_tagging_secrets_for_senders_oracle(recipient);\n    let mut indexed_tagging_secrets = &[];\n    for i in 0..results.len() {\n        if i % 2 != 0 {\n            continue;\n        }\n        indexed_tagging_secrets = indexed_tagging_secrets.push_back(\n            IndexedTaggingSecret::deserialize([results[i], results[i + 1]]),\n        );\n    }\n    indexed_tagging_secrets\n}\n\n#[oracle(getAppTaggingSecretsForSenders)]\nunconstrained fn get_app_tagging_secrets_for_senders_oracle(_recipient: AztecAddress) -> [Field] {}\n"
        },
        "135": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
            "source": "use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"
        },
        "136": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
            "source": "use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(\n            contract_address,\n            randomness,\n            encrypted_event,\n            counter,\n        )\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32,\n) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\npub unconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {}\n"
        },
        "140": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
            "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
        },
        "144": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
            "source": "use dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use crate::utils::point::point_to_bytes;\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"
        },
        "169": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr",
            "source": "use dep::protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator, point::Point, public_keys::OvpkM, scalar::Scalar,\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    field::bn254::decompose, hash::from_field_unsafe as fr_to_fq_unsafe,\n};\n\nuse crate::{\n    encrypted_logs::header::EncryptedLogHeader,\n    keys::point_to_symmetric_key::point_to_symmetric_key, oracle::random::random,\n    utils::point::point_to_bytes,\n};\nuse protocol_types::public_keys::AddressPoint;\n\nfn compute_private_log_payload<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P],\n    include_public_values_prefix: bool,\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] =\n        header.compute_ciphertext(eph_sk, recipient.to_address_point());\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext =\n        compute_incoming_body_ciphertext(plaintext, eph_sk, recipient.to_address_point());\n    let outgoing_body_ciphertext: [u8; 144] =\n        compute_outgoing_body_ciphertext(recipient, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    // If we include the prefix for number of public values, we need to add 1 byte to the offset\n    let mut offset = if include_public_values_prefix { 1 } else { 0 };\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n    offset += 64;\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[offset + i] = eph_pk_bytes[i];\n    }\n\n    offset += 32;\n    for i in 0..48 {\n        encrypted_bytes[offset + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[offset + 48 + i] = outgoing_header_ciphertext[i];\n    }\n\n    offset += 48 * 2;\n    for i in 0..144 {\n        encrypted_bytes[offset + i] = outgoing_body_ciphertext[i];\n    }\n\n    offset += 144;\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - offset;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[offset + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // empty_prefix (1 byte)\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(\n    plaintext: [u8; P],\n    eph_sk: Scalar,\n    address_point: AddressPoint,\n) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, address_point.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's address point --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point,\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_address_point =\n        point_to_bytes(recipient.to_address_point().to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_address_point[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field,\n    )\n        .to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::encrypted_logs::payload::{\n        compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext,\n        compute_private_log_payload,\n    };\n    use dep::protocol_types::{\n        address::AztecAddress, point::Point, public_keys::OvpkM, scalar::Scalar,\n    };\n    use protocol_types::public_keys::AddressPoint;\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n        let ovsk_app = 0x191ac5e29bbc8f80f29ed06b75eaf30c036ed7952d844833860c527077c8c3b4;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x07f696b8b233de2c1935e43c793399586f532da5ff7c0356636a75acb862e964,\n                y: 0x156e8a3e42bfca3663936ba98c7fd26386a14657c23b5f5146f1a94b6c465154,\n                is_infinite: false,\n            },\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,\n            2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,\n            247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,\n            183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,\n            12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,\n            101, 153, 0, 0, 16, 39,\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let log: [u8; 448] = compute_private_log_payload(\n            contract_address,\n            ovsk_app,\n            ovpk_m,\n            recipient,\n            plaintext,\n            false,\n        );\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235,\n            86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 5, 119,\n            121, 10, 234, 188, 194, 216, 30, 200, 208, 201, 158, 127, 93, 43, 242, 241, 69, 32, 37,\n            220, 119, 122, 23, 132, 4, 248, 81, 217, 61, 232, 24, 146, 63, 133, 24, 120, 113, 217,\n            155, 223, 149, 214, 149, 239, 240, 169, 224, 155, 161, 81, 83, 252, 155, 77, 34, 75,\n            110, 30, 113, 223, 189, 202, 171, 6, 192, 157, 91, 60, 116, 155, 254, 190, 28, 4, 7,\n            236, 205, 4, 245, 27, 187, 89, 20, 38, 128, 200, 160, 145, 185, 127, 198, 203, 207, 97,\n            246, 194, 175, 155, 142, 188, 143, 120, 83, 122, 178, 63, 208, 197, 232, 24, 228, 212,\n            45, 69, 157, 38, 90, 219, 119, 194, 239, 130, 155, 246, 143, 135, 242, 196, 123, 71,\n            139, 181, 122, 231, 228, 26, 7, 100, 63, 101, 195, 83, 8, 61, 85, 123, 148, 227, 29,\n            164, 162, 161, 49, 39, 73, 141, 46, 179, 240, 52, 109, 165, 238, 210, 233, 188, 36, 90,\n            175, 2, 42, 149, 78, 208, 176, 145, 50, 180, 152, 245, 55, 112, 40, 153, 180, 78, 54,\n            102, 119, 98, 56, 235, 246, 51, 179, 86, 45, 127, 18, 77, 187, 168, 41, 24, 232, 113,\n            149, 138, 148, 33, 143, 215, 150, 188, 105, 131, 254, 236, 199, 206, 56, 44, 130, 134,\n            29, 99, 254, 69, 153, 146, 68, 234, 148, 148, 178, 38, 221, 182, 148, 178, 100, 13, 206,\n            0, 91, 71, 58, 207, 26, 227, 190, 21, 143, 85, 138, 209, 202, 34, 142, 159, 121, 61, 9,\n            57, 2, 48, 162, 89, 126, 14, 83, 173, 40, 247, 170, 154, 112, 12, 204, 48, 38, 7, 173,\n            108, 38, 234, 20, 16, 115, 91, 106, 140, 121, 63, 99, 23, 247, 0, 148, 9, 163, 145, 43,\n            21, 238, 47, 40, 204, 241, 124, 246, 201, 75, 114, 3, 1, 229, 197, 130, 109, 227, 158,\n            133, 188, 125, 179, 220, 51, 170, 121, 175, 202, 243, 37, 103, 13, 27, 53, 157, 8, 177,\n            11, 208, 120, 64, 211, 148, 201, 240, 56,\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n        };\n        let address_point = AddressPoint {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false,\n            },\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `address_point` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, address_point);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,\n            190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,\n            131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,\n            46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,\n            37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,\n            115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,\n            245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,\n            25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,\n            212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,\n            23, 206, 229, 108,\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb,\n        };\n\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b,\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let ciphertext =\n            compute_outgoing_body_ciphertext(recipient, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238,\n            50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248,\n            43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31,\n            211, 190, 124, 121, 79, 92, 238, 182, 194, 225, 34, 71, 67, 116, 27, 231, 68, 161, 147,\n            94, 53, 195, 83, 237, 172, 52, 173, 229, 26, 234, 107, 43, 82, 68, 16, 105, 37, 125,\n            117, 86, 133, 50, 21, 92, 74, 229, 105, 141, 83, 229, 255, 251, 21, 61, 234, 61, 168,\n            221, 106, 231, 8, 73, 208, 60, 251, 46, 251, 228, 148, 144, 187, 195, 38, 18, 223, 153,\n            8, 121, 178, 84, 237, 148, 254, 219, 59, 62,\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n"
        },
        "17": {
            "path": "std/ec/mod.nr",
            "source": "// Elliptic curve implementation\n// Overview\n// ========\n// The following three elliptic curve representations are admissible:\npub mod tecurve; // Twisted Edwards curves\npub mod swcurve; // Elliptic curves in Short Weierstrass form\npub mod montcurve; // Montgomery curves\npub mod consts; // Commonly used curve presets\n//\n// Note that Twisted Edwards and Montgomery curves are (birationally) equivalent, so that\n// they may be freely converted between one another, whereas Short Weierstrass curves are\n// more general. Diagramatically:\n//\n// tecurve == montcurve `subset` swcurve\n//\n// Each module is further divided into two submodules, 'affine' and 'curvegroup', depending\n// on the preferred coordinate representation. Affine coordinates are none other than the usual\n// two-dimensional Cartesian coordinates used in the definitions of these curves, whereas\n// 'CurveGroup' coordinates (terminology borrowed from Arkworks, whose conventions we try\n// to follow) are special coordinate systems with respect to which the group operations may be\n// implemented more efficiently, usually by means of an appropriate choice of projective coordinates.\n//\n// In each of these submodules, there is a Point struct and a Curve struct, the former\n// representing a point in the coordinate system and the latter a curve configuration.\n//\n// Points\n// ======\n// Points may be instantiated using the associated function `new`, which takes coordinates\n// as its arguments. For instance,\n//\n// `let p = swcurve::Point::new(1,1);`\n//\n// The additive identity may be constructed by a call to the associated function `zero` of no\n// arguments:\n//\n// `let zero = swcurve::Point::zero();`\n//\n// Points may be tested for equality by calling the method `eq`:\n//\n// `let pred = p.eq(zero);`\n//\n// There is also the method `is_zero` to explicitly check whether a point is the additive identity:\n//\n// `constrain pred == p.is_zero();`\n//\n// Points may be negated by calling the `negate` method and converted to CurveGroup (or affine)\n// coordinates by calling the `into_group` (resp. `into_affine`) method on them. Finally,\n// Points may be freely mapped between their respective Twisted Edwards and Montgomery\n// representations by calling the `into_montcurve` or `into_tecurve` methods. For mappings\n// between Twisted Edwards/Montgomery curves and Short Weierstrass curves, see the Curve section\n// below, as the underlying mappings are those of curves rather than ambient spaces.\n// As a rule, Points in affine (or CurveGroup) coordinates are mapped to Points in affine\n// (resp. CurveGroup) coordinates.\n//\n// Curves\n// ======\n// A curve configuration (Curve) is completely determined by the Field coefficients of its defining\n// equation (a and b in the case of swcurve, a and d in the case of tecurve, and j and k in\n// the case of montcurve) together with a generator (`gen`) in the corresponding coordinate system.\n// For example, the Baby Jubjub curve configuration as defined in ERC-2494 may be instantiated as a Twisted\n// Edwards curve in affine coordinates as follows:\n//\n// `let bjj_affine = tecurve::Curve::new(168700, 168696, tecurve::Point::new(995203441582195749578291179787384436505546430278305826713579947235728471134,5472060717959818805561601436314318772137091100104008585924551046643952123905));`\n//\n// The `contains` method may be used to check whether a Point lies on a given curve:\n//\n// `constrain bjj_affine.contains(tecurve::Point::zero());`\n//\n// The elliptic curve group's addition operation is exposed as the `add` method, e.g.\n//\n// `let p = bjj_affine.add(bjj_affine.gen, bjj_affine.gen);`\n//\n// subtraction as the `subtract` method, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.subtract(bjj_affine.gen, bjj_affine.gen));`\n//\n// scalar multiplication as the `mul` method, where the scalar is assumed to be a Field* element, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.mul(2, tecurve::Point::zero());`\n//\n// There is a scalar multiplication method (`bit_mul`) provided where the scalar input is expected to be\n// an array of bits (little-endian convention), as well as a multi-scalar multiplication method** (`msm`)\n// which takes an array of Field elements and an array of elliptic curve points as arguments, both assumed\n// to be of the same length.\n//\n// Curve configurations may be converted between different coordinate representations by calling the `into_group`\n// and `into_affine` methods on them, e.g.\n//\n// `let bjj_curvegroup = bjj_affine.into_group();`\n//\n// Curve configurations may also be converted between different curve representations by calling the `into_swcurve`,\n// `into_montcurve` and `into_tecurve` methods subject to the relation between the curve representations mentioned\n// above. Note that it is possible to map Points from a Twisted Edwards/Montgomery curve to the corresponding\n// Short Weierstrass representation and back, and the methods to do so are exposed as `map_into_swcurve` and\n// `map_from_swcurve`, which each take one argument, the point to be mapped.\n//\n// Curve maps\n// ==========\n// There are a few different ways of mapping Field elements to elliptic curves. Here we provide the simplified\n// Shallue-van de Woestijne-Ulas and Elligator 2 methods, the former being applicable to all curve types\n// provided above subject to the constraint that the coefficients of the corresponding Short Weierstrass curve satisfies\n// a*b != 0 and the latter being applicable to Montgomery and Twisted Edwards curves subject to the constraint that\n// the coefficients of the corresponding Montgomery curve satisfy j*k != 0 and (j^2 - 4)/k^2 is non-square.\n//\n// The simplified Shallue-van de Woestijne-Ulas method is exposed as the method `swu_map` on the Curve configuration and\n// depends on two parameters, a Field element z != -1 for which g(x) - z is irreducible over Field and g(b/(z*a)) is\n// square, where g(x) = x^3 + a*x + b is the right-hand side of the defining equation of the corresponding Short\n// Weierstrass curve, and a Field element u to be mapped onto the curve. For example, in the case of bjj_affine above,\n// it may be determined using the scripts provided at <https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve> that z = 5.\n//\n// The Elligator 2 method is exposed as the method `elligator2_map` on the Curve configurations of Montgomery and\n// Twisted Edwards curves. Like the simplified SWU method above, it depends on a certain non-square element of Field,\n// but this element need not satisfy any further conditions, so it is included as the (Field-dependent) constant\n//`ZETA` below. Thus, the `elligator2_map` method depends only on one parameter, the Field element to be mapped onto\n// the curve.\n//\n// For details on all of the above in the context of hashing to elliptic curves, see <https://datatracker.ietf.org/doc/id/draft-irtf-cfrg-hash-to-curve-06.html>.\n//\n//\n// *TODO: Replace Field with Bigint.\n// **TODO: Support arrays of structs to make this work.\n// Field-dependent constant ZETA = a non-square element of Field\n// Required for Elligator 2 map\n// TODO: Replace with built-in constant.\nglobal ZETA = 5;\n// Field-dependent constants for Tonelli-Shanks algorithm (see sqrt function below)\n// TODO: Possibly make this built-in.\nglobal C1 = 28;\nglobal C3 = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5 = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n// Higher-order version of scalar multiplication\n// TODO: Make this work so that the submodules' bit_mul may be defined in terms of it.\n//fn bit_mul<T,N>(add: fn(T,T) -> T, e: T, bits: [u1; N], p: T) -> T {\n//    let mut out = e;\n//    let n = bits.len();\n//\n//    for i in 0..n {\n//        out = add(\n//            add(out, out),\n//            if(bits[n - i - 1] == 0) {e} else {p});\n//    }\n//\n//    out\n//}\n// TODO: Make this built-in.\npub fn safe_inverse(x: Field) -> Field {\n    if x == 0 {\n        0\n    } else {\n        1 / x\n    }\n}\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\npub fn is_square(x: Field) -> bool {\n    let v = pow(x, 0 - 1 / 2);\n\n    v * (v - 1) == 0\n}\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n"
        },
        "170": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr",
            "source": "use dep::protocol_types::{\n    address::AztecAddress,\n    point::Point,\n    public_keys::{IvpkM, PublicKeys, ToPoint},\n    scalar::Scalar,\n};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48]\n    where\n        T: ToPoint,\n    {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false,\n        },\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131,\n        160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171,\n        176, 218, 48, 209, 73, 89, 200, 209,\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"
        },
        "171": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr",
            "source": "use crate::{\n    context::PrivateContext,\n    encrypted_logs::payload::compute_private_log_payload,\n    keys::getters::get_ovsk_app,\n    note::{note_emission::NoteEmission, note_interface::NoteInterface},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, hash::sha256_to_field, public_keys::OvpkM,\n};\n\n/// Computes private note log payload and a log hash\nfn compute_payload_and_hash<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 417 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n\n    // For note logs we always include public values prefix\n    let encrypted_log: [u8; 417 + N * 32] =\n        compute_private_log_payload(contract_address, ovsk_app, ovpk, recipient, plaintext, true);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_payload_and_hash_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 417 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_payload_and_hash(context, note, ovsk_app, ovpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let ovsk_app: Field = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) =\n            compute_payload_and_hash(*context, e.note, ovsk_app, ovpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) =\n            unsafe { compute_payload_and_hash_unconstrained(*context, e.note, ovpk, recipient) };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n"
        },
        "173": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
            "source": "use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        header::get_header_at,\n        key_validation_request::get_key_validation_request,\n        logs::{emit_encrypted_event_log, emit_encrypted_note_log},\n        returns::pack_returns,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log_hash::{EncryptedLogHash, LogHash, NoteLogHash},\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_ENCRYPTED_LOGS_PER_CALL, MAX_KEY_VALIDATION_REQUESTS_PER_CALL,\n        MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    },\n    header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
        },
        "174": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr",
            "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"
        },
        "214": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr",
            "source": "use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"
        },
        "24": {
            "path": "std/embedded_curve_ops.nr",
            "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"
        },
        "249": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
            "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
        },
        "25": {
            "path": "std/field/bn254.nr",
            "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
        },
        "26": {
            "path": "std/field/mod.nr",
            "source": "pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
        },
        "263": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
            "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
        },
        "265": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
            "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse dep::std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\nuse std::default::Default;\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
        },
        "270": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
            "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedEncryptedLogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__VK,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    proof::verification_key::VerificationKey,\n    traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
        },
        "282": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr",
            "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"
        },
        "29": {
            "path": "std/hash/mod.nr",
            "source": "pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
        },
        "3": {
            "path": "std/array/mod.nr",
            "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n"
        },
        "304": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
            "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Serialize}};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"
        },
        "321": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr",
            "source": "use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
        },
        "322": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
            "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        GENERATOR_INDEX__PUBLIC_KEYS_HASH, MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n    utils,\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    ec::{pow, sqrt},\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
        },
        "323": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr",
            "source": "use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
        },
        "326": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr",
            "source": "use crate::{\n    address::{\n        aztec_address::AztecAddress, partial_address::PartialAddress,\n        public_keys_hash::PublicKeysHash,\n    },\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, Hash, Serialize},\n};\n\npub struct ContractInstance {\n    salt: Field,\n    deployer: AztecAddress,\n    contract_class_id: ContractClassId,\n    initialization_hash: Field,\n    public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n"
        },
        "331": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/easy-private-state/src/easy_private_uint.nr",
            "source": "use dep::aztec::{\n    context::PrivateContext, encrypted_logs::encrypted_note_emission::encode_and_encrypt_note,\n    keys::getters::get_public_keys, note::note_getter_options::NoteGetterOptions,\n    protocol_types::address::AztecAddress, state_vars::PrivateSet,\n};\nuse dep::value_note::{filter::filter_notes_min_sum, value_note::ValueNote};\n\npub struct EasyPrivateUint<Context> {\n    context: Context,\n    set: PrivateSet<ValueNote, Context>,\n    storage_slot: Field,\n}\n\n// Holds a note that can act similarly to an int.\nimpl<Context> EasyPrivateUint<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = PrivateSet::new(context, storage_slot);\n        EasyPrivateUint { context, set, storage_slot }\n    }\n}\n\nimpl EasyPrivateUint<&mut PrivateContext> {\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u64, owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        let outgoing_viewer_keys = get_public_keys(outgoing_viewer);\n        // Creates new note for the owner.\n        let mut addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(&mut addend_note).emit(encode_and_encrypt_note(\n            self.context,\n            outgoing_viewer_keys.ovpk_m,\n            owner,\n        ));\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u64, owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        let outgoing_viewer_keys = get_public_keys(outgoing_viewer);\n\n        // docs:start:pop_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let notes = self.set.pop_notes(options);\n        // docs:end:pop_notes\n        let mut minuend: u64 = 0;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n\n                minuend += note.value as u64;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let mut result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(&mut result_note).emit(encode_and_encrypt_note(\n            self.context,\n            outgoing_viewer_keys.ovpk_m,\n            owner,\n        ));\n    }\n}\n"
        },
        "333": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/value-note/src/balance_utils.nr",
            "source": "use crate::value_note::ValueNote;\nuse dep::aztec::{\n    context::UnconstrainedContext, note::note_viewer_options::NoteViewerOptions,\n    state_vars::PrivateSet,\n};\n\npub unconstrained fn get_balance(set: PrivateSet<ValueNote, UnconstrainedContext>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\npub unconstrained fn get_balance_with_offset(\n    set: PrivateSet<ValueNote, UnconstrainedContext>,\n    offset: u32,\n) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let mut options = NoteViewerOptions::new();\n    let notes = set.view_notes(options.set_offset(offset));\n    // docs:end:view_notes\n    for i in 0..options.limit {\n        if i < notes.len() {\n            balance += notes.get_unchecked(i).value;\n        }\n    }\n\n    if (notes.len() == options.limit) {\n        balance += get_balance_with_offset(set, offset + options.limit);\n    }\n\n    balance\n}\n"
        },
        "337": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/value-note/src/value_note.nr",
            "source": "use dep::aztec::{\n    context::PrivateContext,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    },\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator, traits::Serialize,\n    },\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n"
        },
        "34": {
            "path": "std/hash/poseidon2.nr",
            "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
        },
        "35": {
            "path": "std/hash/sha256.nr",
            "source": "use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8 = 256;\nglobal TWO_POW_16 = TWO_POW_8 * 256;\nglobal TWO_POW_24 = TWO_POW_16 * 256;\nglobal TWO_POW_32 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n"
        },
        "59": {
            "path": "std/panic.nr",
            "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
        },
        "6": {
            "path": "std/cmp.nr",
            "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
        },
        "7": {
            "path": "std/collections/bounded_vec.nr",
            "source": "use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"
        },
        "70": {
            "path": "/home/kimani/aztec/aztec-private-counter/contracts/counter/src/main.nr",
            "source": "use dep::aztec::macros::aztec;\n\n#[aztec]\ncontract Counter {\n    use aztec::macros::{functions::{initializer, private}, storage::storage};\n    use aztec::prelude::{AztecAddress, Map};\n    use easy_private_state::EasyPrivateUint;\n    use value_note::{balance_utils, value_note::ValueNote};\n\n    #[storage]\n    struct Storage<Context> {\n        counters: Map<AztecAddress, EasyPrivateUint<Context>, Context>,\n    }\n\n    #[initializer]\n    #[private]\n    // We can name our initializer anything we want as long as it's marked as aztec(initializer)\n    fn initialize(headstart: u64, owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        let counters = storage.counters;\n        counters.at(owner).add(headstart, owner, outgoing_viewer);\n    }\n\n    #[private]\n    fn increment(owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        unsafe {\n            dep::aztec::oracle::debug_log::debug_log_format(\n                \"Incrementing counter for owner {0}\",\n                [owner.to_field()],\n            );\n        }\n        let counters = storage.counters;\n        counters.at(owner).add(1, owner, outgoing_viewer);\n    }\n\n    unconstrained fn get_counter(owner: AztecAddress) -> pub Field {\n        let counters = storage.counters;\n        balance_utils::get_balance(counters.at(owner).set)\n    }\n\n}\n"
        },
        "85": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
            "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    storage::map::derive_storage_slot_in_map,\n    traits::{Deserialize, Serialize, ToField},\n};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<T, N> for Map<K, T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
        },
        "88": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
            "source": "use crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest,\n    constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::{Deserialize, Serialize},\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PrivateSet<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
        },
        "91": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
            "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
        },
        "92": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr",
            "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\nuse dep::protocol_types::constants::{\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note = unsafe { get_note_internal(storage_slot) };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
        },
        "94": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
            "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_header::NoteHeader,\n    note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"
        },
        "96": {
            "path": "/home/kimani/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.61.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr",
            "source": "use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteInterface;\nuse dep::protocol_types::traits::ToField;\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteInterface<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"
        }
    }
}